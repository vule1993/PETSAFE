{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\"; //is used to pipeline the dispatched objects and give us a feeling of sync execution by being async\n\nconst rootReducer = combineReducers({});\nconst logger = () => next => action => {\n  console.log(\"action logger store \", action);\n  next(action);\n};\nexport default configureStore({\n  reducer: rootReducer\n}, {},\n//initial state if we want to set from store instead of reducer\napplyMiddleware(thunk, logger));","map":{"version":3,"names":["configureStore","combineReducers","applyMiddleware","thunk","rootReducer","logger","next","action","console","log","reducer"],"sources":["/Users/vule/Documents/PETSAFE/PetSafe/front-end/src/store/store.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\"; //is used to pipeline the dispatched objects and give us a feeling of sync execution by being async\n\nconst rootReducer = combineReducers({});\nconst logger = () => (next) => (action) => {\n  console.log(\"action logger store \", action);\n  next(action);\n};\nexport default configureStore(\n  { reducer: rootReducer },\n  {}, //initial state if we want to set from store instead of reducer\n  applyMiddleware(thunk, logger)\n);\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,eAAe,EAAEC,eAAe,QAAQ,OAAO;AACxD,OAAOC,KAAK,MAAM,aAAa,CAAC,CAAC;;AAEjC,MAAMC,WAAW,GAAGH,eAAe,CAAC,CAAC,CAAC,CAAC;AACvC,MAAMI,MAAM,GAAGA,CAAA,KAAOC,IAAI,IAAMC,MAAM,IAAK;EACzCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,MAAM,CAAC;EAC3CD,IAAI,CAACC,MAAM,CAAC;AACd,CAAC;AACD,eAAeP,cAAc,CAC3B;EAAEU,OAAO,EAAEN;AAAY,CAAC,EACxB,CAAC,CAAC;AAAE;AACJF,eAAe,CAACC,KAAK,EAAEE,MAAM,CAAC,CAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}